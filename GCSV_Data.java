public class GCSV_Data
{
    // is the factor of past continental area, relative to modern (10 Ma time steps)
    public static final double[] fA0={1.0,1.0,1.0,1.0,0.91,0.92,0.94,0.87,0.79,0.81,
                                   0.82,0.85,0.88,0.86,0.84,0.83,0.85,0.87,0.89,0.91,
                                   0.91,0.90,0.90,0.88,0.89,0.86,0.84,0.81,0.81,0.80,
                                   0.80,0.80,0.79,0.77,0.76,0.73,0.70,0.69,0.69,0.72,
                                   0.74,0.74,0.74,0.62,0.63,0.67,0.62,0.62,0.62,0.65,
                                   0.65,0.66,0.64,0.66,0.85,0.90,0.95,1.00};
                                   
    //fD is the factor of water runoff per unit continental area, relative to modern
    public static final double[] fD0={1.00,1.02,1.04,1.06,1.08,1.10,1.15,1.20,1.19,1.19,
                                   1.18,1.18,1.18,1.17,1.15,1.13,1.12,1.10,1.05,1.03,
                                   1.02,1.01,0.98,0.96,0.94,0.96,0.97,1.02,1.08,1.10,
                                   1.13,1.14,1.15,1.19,1.21,1.21,1.21,1.21,1.21,1.22,
                                   1.23,1.25,1.28,1.31,1.10,1.00,0.90,0.92,0.96,1.03,
                                   1.07,1.10,1.12,1.12,1.12,1.12,1.12,1.12};
                                   
    //temp0 is the average land temperature in past times, degrees C used in defining the GEOG variable
    public static final double[] temp0={12.4,12.4,12.4,12.5,12.5,12.5,11.6,11.0,11.2,11.3,
                                    11.5,11.7,11.9,12.0,12.4,12.8,13.1,13.4,13.7,14.0,
                                    14.2,14.2,14.1,14.1,14.1,14.3,14.2,13.9,13.7,13.5,
                                    13.3,13.1,13.0,13.0,12.9,13.0,13.1,13.3,13.4,13.5,
                                    12.5,11.5,10.5,12.5,15.0,17.0,18.2,17.0,16.3,15.5,
                                    14.5,13.5,13.0,13.0,13.0,12.0,12.0,12.0};

    //for the most recent 140My, the fSR parameter is given every 5My, not 10My
    //fSR is the factor twixt Sr isotopes and silicate weathering
    public static final double[] fSR0={1.00,0.98,0.98,0.98,0.98,1.02,1.04,1.11,1.22,1.41,
                                    1.46,1.41,1.35,1.30,1.35,1.37,1.33,1.30,1.37,1.52,
                                    1.65,1.76,1.74,1.67,1.63,1.67,1.52,1.26,1.27,1.27,
                                    1.27,1.21,1.14,1.09,1.10,1.14,1.12,1.10,1.09,1.11,
                                    1.14,1.10,1.07,1.21,1.21,1.14,1.07,1.07,1.28,1.43,
                                    1.43,1.40,1.38,1.36,1.38,1.48,1.53,1.55,1.55,1.52,
                                    1.52,1.50,1.49,1.50,1.52,1.62,1.70,1.59,1.35,1.20,1.04,1.00};

    //Sulfur isotope data (d34S) below are from Kampschulte and Strauss (2004)
    public static final double[] DLS0={20.0,21.0,21.0,21.0,21.0,19.0,18.0,17.5,17.8,17.5,
                                    15.0,15.0,15.3,16.3,16.2,16.0,17.0,17.0,18.0,18.5,
                                    16.0,16.0,17.5,18.0,22.0,20.0,12.0,12.5,12.5,12.2,
                                    13.5,14.8,15.5,14.5,15.5,17.0,25.0,24.5,20.0,19.0,
                                    22.0,27.0,26.5,26.0,26.7,25.5,25.0,24.3,26.0,30.0,
                                    27.8,35.3,36.4,33.0,30.3,32.0,34.4,35.2};

    //Carbon isotope data (d13C) - data has been smoothed.  see jpark for documentation
    public static final double[] DLC0={1.50,1.70,2.00,2.20,2.20,2.20,2.30,2.40,2.40,2.50,
                                    2.60,2.70,2.50,2.00,1.20,1.70,1.54,1.38,1.22,1.06,
                                    2.00,2.50,3.50,2.50,2.00,1.00,4.00,4.70,4.40,4.70,
                                    4.40,4.60,3.20,2.50,2.90,2.80,1.40,1.00,1.00,1.50,
                                    0.50,2.00,1.50,1.00,0.70,0.00,0.00,-1.0,-1.0,1.00,
                                    -1.0,-0.5,0.00,0.00,-2.0,0.00,0.00,0.00};

    //al0 - is difference in d13C between coexisting marine orgC and marine carbonate
    public static final double[] al0={22.5,25.9,27.5,30.0,29.6,30.5,30.2,28.5,27.8,29.7,
                                   28.8,30.0,31.5,29.3,30.3,31.0,31.3,34.0,33.7,32.0,
                                   30.4,30.7,31.0,31.5,32.1,32.6,33.0,33.0,32.9,32.8,
                                   32.7,32.6,32.6,32.5,32.4,32.1,31.8,31.0,30.3,29.4,
                                   28.6,28.8,29.0,30.3,31.5,31.0,30.6,29.8,29.0,29.0,
                                   29.0,29.2,29.4,29.2,29.0,30.0,30.0,30.0};

    //fL is the fraction of land area covered by carbonate rocks, normalized to modern
    public static final double[] fL0={1.00,1.00,0.99,1.29,1.10,1.10,1.26,0.88,0.88,0.88,
                                   1.04,1.04,1.04,1.04,1.04,1.24,1.25,1.25,1.25,1.36,
                                   1.36,1.23,1.23,1.39,1.36,1.43,1.31,1.31,1.31,1.45,
                                   1.45,1.45,1.41,1.41,1.41,1.41,1.40,1.47,1.47,1.47,
                                   1.63,1.63,1.54,1.43,1.43,1.15,1.07,1.07,0.99,0.99,
                                   0.99,0.97,1.05,1.05,0.63,0.63,0.63,0.63};

    //Sr0 is specified every 5my to 100Ma, prior times is 10My spacing
    //Sr0 is the normalized difference of basalt-predicted and measured Sr isotope ratios (10ma)
    public static final double[] Sr0={92.0,90.5,89.5,89.0,85.0,82.5,81.0,79.0,78.0,78.0,
                                   78.0,78.0,78.5,79.0,78.0,77.0,76.0,75.5,75.0,75.0,
                                   74.0,73.0,72.0,73.0,71.0,69.0,68.0,69.0,75.0,76.0,
                                   75.0,78.0,78.0,78.0,75.0,73.0,71.0,77.0,82.0,83.0,
                                   82.0,82.0,81.0,78.0,75.0,78.0,82.0,82.0,78.0,80.0,
                                   85.0,87.0,86.0,81.0,79.0,78.0,80.0,82.0,85.0,87.0,
                                   89.0,89.0,89.0,89.0,90.0,90.0,90.0,90.0};
                                   
    public static double[] fillSr()
    {
        double []Sr = new double[600];
        for(int i=1;i<=20;i++) {
            int jj=(i-1)*5;
            for (int j=0; j<=4;j++) {
                Sr[jj+j]=(j*GCSV_Data.Sr0[i]+(5-j)*GCSV_Data.Sr0[i-1])/5.0; } }
        for (int i=21; i<=67; i++) {
            int jj=100+(i-21)*10;
            for (int j=0; j<=9; j++) {
                Sr[jj+j]=(j*GCSV_Data.Sr0[i]+(10-j)*GCSV_Data.Sr0[i-1])/10.0; } }
       Sr[570]=GCSV_Data.Sr0[67];
       return Sr;
    }
    public static double[] fillFSr()
    {
        double []fSR = new double[600];
        for(int i=1;i<=28;i++) {
            int jj=1+(i-1)*5;
            for (int j=0; j<=4;j++){
                fSR[jj+j-1]=(j*GCSV_Data.fSR0[i]+(5-j)*GCSV_Data.fSR0[i-1])/5.0; } }
        for (int i=29; i<=71; i++) {
            int jj=141+(i-29)*10;
            for (int j=0; j<=9; j++)
                fSR[jj+j-1]=(j*GCSV_Data.fSR0[i]+(10-j)*GCSV_Data.fSR0[i-1])/10.0; }
        fSR[570]=GCSV_Data.fSR0[71];
        return fSR;
    }
}